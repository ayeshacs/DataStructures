public class LinkedList
{
    Node head;
    
    public class Node
    {
        int data;
        Node next;
        
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
    
    void addNode(int d)
    {
        Node curr = head;
        Node newNode = new Node(d);
        if(curr==null)
        {
            head = newNode;
            return;
        }
        
        else
        {
            //traversing to the end
            while(curr.next!=null)
                curr = curr.next;
                
            curr.next = newNode;
            return;
            
        }
    }
    
    void printList()
    {
        Node curr = head;
        
        while(curr!=null)
        {
            System.out.println(curr.data);
            curr = curr.next;
        }
    }
    
    
    //160. Intersection of Two Linked Lists (https://leetcode.com/problems/intersection-of-two-linked-lists/description/)
    public Node getIntersectionNode(Node headA, Node headB) 
    {
        Node p1 = headA;
        Node p2 = headB;
        
        if (headA==null || headB ==null)
            return null;
        
        while(p1!=p2)
        {
            if(p1!=null)
                p1=p1.next;
            else
                p1=headB;
            
            if(p2!=null)
                p2=p2.next;
            else
                p2=headA;
        }
        return p1;
    }
    
    public static void main(String []args)
     {
        LinkedList ll = new LinkedList();
        ll.addNode(1);
        ll.addNode(2);
        ll.addNode(3);
        ll.printList();
     }
}
