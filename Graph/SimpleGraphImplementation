import java.util.*;
public class Graph
{

    int V;                                      //V is number of Vertices. Graph is an array of LinkedList with V elements
    LinkedList<Integer>[] adjListArray;         //this is an array of Linked List
    
    //constructor
    Graph(int V)
    {
        this.V = V;
        adjListArray = new LinkedList[V]; //create an empty array to hold Linked Lists/ Adjacent Lists
        
        //create an adjacent list for each vertex in array
        for (int i =0; i<V; i++)
        {
            adjListArray[i] = new LinkedList<Integer>();
        }
        
    }
    
    //adds an edge to an undirected graph
    public void addEdge(Graph graph, int src, int dest)
    {
        graph.adjListArray[src].add(dest); //LinedList.add(n) adds n to a linked list
        graph.adjListArray[dest].add(src); //undirected graph, so a two-way relationship
    }
    
    
      // A utility function to print the adjacency list  
    // representation of graph 
    public void printGraph(Graph graph) 
    {        
        for(int v = 0; v < graph.V; v++) 
        { 
            System.out.println("Adjacency list of vertex "+ v); 
            System.out.print("head"); 
            for(Integer pCrawl: graph.adjListArray[v]){ 
                System.out.print(" -> "+pCrawl); 
            } 
            System.out.println("\n"); 
        } 
    } 
       
    // Driver program to test above functions 
    public static void main(String args[]) 
    { 
        // create the graph given in above figure 
        int V = 5; 
        Graph graph = new Graph(V); 
        graph.addEdge(graph, 0, 1); 
        graph.addEdge(graph, 0, 4); 
        graph.addEdge(graph, 1, 2); 
        graph.addEdge(graph, 1, 3); 
        graph.addEdge(graph, 1, 4); 
        graph.addEdge(graph, 2, 3); 
        graph.addEdge(graph, 3, 4); 
       
        // print the adjacency list representation of  
        // the above graph 
        graph.printGraph(graph); 
    } 
}
