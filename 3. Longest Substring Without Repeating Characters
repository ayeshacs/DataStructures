/*
Given a string, find the length of the longest substring without repeating characters.

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/


/*Brute force approach
1. Make all the possible substrings of the given string
2. Iterate through all the possible substrings and see if any characters repeat. 
Say we have a function that checks a given substring and see if it has repeated characters, boolean isUnique(String s) function
*/        

class Solution 
{
    public int lengthOfLongestSubstring(String s) 
    {
        
        //Now, generate all possible substrings
        int n = s.length();
        int max_substring =0;
        
        for(int i=0; i<n; i++)
        {
            for(int j=i+1; j<=n; j++)
            {
                int lengthOfSubstring =j-i;
                if(isUnique(s, i, j)) 
                    max_substring = Math.max(max_substring, lengthOfSubstring);
            }
        }
        return max_substring;
        
    }
    
    //this function checks if a given range of a String s has all unique characters or not
    public boolean isUnique(String s, int start, int end)
    {
        //start: the index of starting character of substing s
        //end: the index of ending character of substring s
        
        Set<Character> set = new HashSet<Character>();
        
        //iterate through s from start to end
        for(int i=start; i<end; i++)
        {
            char ch=s.charAt(i);
            
            if(set.contains(ch))
                return false;
            set.add(ch);
        }
        return true;
    }
}
